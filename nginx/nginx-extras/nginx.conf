# Needed for metrics
include /etc/nginx/modules-enabled/*.conf;

user  www-data;
worker_processes  1;
 
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;
 
 
events {
    worker_connections  1024;
}
 
 
http {
    disable_symlinks off;
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
 
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
 
    access_log  /var/log/nginx/access.log  main;
 
    sendfile       on;
    tcp_nopush     on;
 
    keepalive_timeout  65;
 
    # Fix issues of "upstream sent too big header while reading response header from upstream"
    fastcgi_buffers 64 64k;
    fastcgi_buffer_size 128k;
 
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/hal+json application/x-javascript text/xml application/xml application/hal+xml application/xml+rss text/javascript;
 
    # Prometheus monitoring
    lua_shared_dict prometheus_metrics 10M;
    lua_package_path "/etc/nginx/?.lua";
    init_by_lua '
      prometheus = require("prometheus").init("prometheus_metrics")
      metric_requests = prometheus:counter(
      "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
      metric_latency = prometheus:histogram(
      "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
      metric_connections = prometheus:gauge(
      "nginx_http_connections", "Number of HTTP connections", {"state"})
    ';
    log_by_lua '
      local host = ngx.var.host:gsub("^www.", "")
      metric_requests:inc(1, {host, ngx.var.status})
      metric_latency:observe(ngx.now() - ngx.req.start_time(), {host})
    ';

    include /etc/nginx/conf.d/*.conf;
}
